--- DCCEXParser.h	(before formatting)
+++ DCCEXParser.h	(after formatting)
@@ -30,30 +30,29 @@
 typedef void (*AT_COMMAND_CALLBACK)(HardwareSerial* stream, const byte* command);
 
 struct DCCEXParser {
-        static void parse(Print* stream, byte* command, RingStream* ringStream);
-        static void parse(const FSH* cmd);
-        static void parseOne(Print* stream, byte* command, RingStream* ringStream);
-        static void setFilter(FILTER_CALLBACK filter);
-        static void setRMFTFilter(FILTER_CALLBACK filter);
-        static void setAtCommandCallback(AT_COMMAND_CALLBACK filter);
-        static const int MAX_COMMAND_PARAMS = 10;  // Must not exceed this
+  static void parse(Print* stream, byte* command, RingStream* ringStream);
+  static void parse(const FSH* cmd);
+  static void parseOne(Print* stream, byte* command, RingStream* ringStream);
+  static void setFilter(FILTER_CALLBACK filter);
+  static void setRMFTFilter(FILTER_CALLBACK filter);
+  static void setAtCommandCallback(AT_COMMAND_CALLBACK filter);
+  static const int MAX_COMMAND_PARAMS = 10;  // Must not exceed this
 
  private:
   static const int16_t MAX_BUFFER = 50;  // longest command sent in
   static int16_t splitValues(int16_t result[MAX_COMMAND_PARAMS], byte* command, bool usehex);
 
-    static bool parseT(Print* stream, int16_t params, int16_t p[]);
-    static bool parseZ(Print* stream, int16_t params, int16_t p[]);
-    static bool parseS(Print* stream, int16_t 
-      params, int16_t    p  []);
-    static bool parsef(Print* stream, int16_t params, int16_t p[]);
+  static bool parseT(Print* stream, int16_t params, int16_t p[]);
+  static bool parseZ(Print* stream, int16_t params, int16_t p[]);
+  static bool parseS(Print* stream, int16_t params, int16_t p[]);
+  static bool parsef(Print* stream, int16_t params, int16_t p[]);
   static bool parseC(Print* stream, int16_t params, int16_t p[]);
   static bool parseD(Print* stream, int16_t params, int16_t p[]);
 #ifndef IO_NO_HAL
-  static bool parseI(Print*   stream, int16_t params, int16_t p[]);
+  static bool parseI(Print* stream, int16_t params, int16_t p[]);
 #endif
 
-  static    Print* getAsyncReplyStream();
+  static Print* getAsyncReplyStream();
   static void commitAsyncReplyStream();
 
   static bool stashBusy;
@@ -64,19 +63,19 @@
   static int16_t stashP[MAX_COMMAND_PARAMS];
   static bool stashCallback(Print* stream, int16_t p[MAX_COMMAND_PARAMS], RingStream* ringStream);
   static void callback_W(int16_t result);
-  static void callback_W4( int16_t result);
+  static void callback_W4(int16_t result);
   static void callback_B(int16_t result);
-  static void callback_R( int16_t result);
+  static void callback_R(int16_t result);
   static void callback_Rloco(int16_t result);
-  static void callback_Wloco( int16_t result);
+  static void callback_Wloco(int16_t result);
   static void callback_Wconsist(int16_t result);
-  static void callback_Vbit (int16_t result);
-  static void callback_Vbyte(int16_t result) ;
+  static void callback_Vbit(int16_t result);
+  static void callback_Vbyte(int16_t result);
   static FILTER_CALLBACK filterCallback;
-  static FILTER_CALLBACK filterRMFTCallback ;
-  static AT_COMMAND_CALLBACK atCommandCallback ;
-  static bool funcmap(int16_t cab, byte value, byte fstart, byte fstop );
-  static void sendFlashList(Print* stream, const int16_t flashList[] );
+  static FILTER_CALLBACK filterRMFTCallback;
+  static AT_COMMAND_CALLBACK atCommandCallback;
+  static bool funcmap(int16_t cab, byte value, byte fstart, byte fstop);
+  static void sendFlashList(Print* stream, const int16_t flashList[]);
 };
 
 #endif
